<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hl7.Fhir.Support</name>
    </assembly>
    <members>
        <member name="T:Hl7.Fhir.ElementModel.IElementNavigator">
            <summary>
            A navigator across a tree representing FHIR data, independent of serialization format or FHIR version.
            </summary>
            <remarks>
            An implementation of this interface may be either type-aware or not, depending on whether it has access to FHIR type
            information. This influences the way the properties Name, Type and Value need to be interpreted. See each property for
            more details. 
            
            <para>Initially, the navigator will be placed on a "root" which has the same name as the type of the instance data
            (often the name of the resource type, e.g. 'Patient'), but if the tree is a fragment it may be the name of a data type as well). Note
            that contained resources will have a node called "contained" as their root.</para>
            
            <para>Since for most uses, Clone() will be called often, implementations should normally be a struct, not a class</para>
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.IElementNavigator.MoveToNext(System.String)">
            <summary>
            Move to the next sibling of the current element.
            </summary>
            <returns>false when there is no next sibling, true otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.IElementNavigator.MoveToFirstChild(System.String)">
            <summary>
            Move to the first child of the current element.
            </summary>
            <param name="nameFilter">
            If the value is provided, then only elements that have this value for the name should
            be considered by the navigator (during MoveNext())
            </param>
            <returns>false if the element has no children, true otherwise</returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.IElementNavigator.Clone">
            <summary>
            Clone the current navigator
            </summary>
            <returns>A navigator that is positioned at the same location as the cloned navigator.</returns>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.IElementNavigator.Name">
            <summary>
            Name of the node, e.g. "active", "value".
            </summary>
            <remarks>Depending on whether the navigator has type information for this element, choice elements may be represented as their 
            "raw" name on the wire or not. e.g. it may be 'value' (with Type == "CodeableConcept") or 'valueCodeableConcept' (and Type == null).
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.IElementNavigator.Type">
            <summary>
            Type of the node. If a FHIR type, this is just a simple string, otherwise a StructureDefinition url for a type defined as a logical model.
            </summary>
            <remarks>This property will be null if the navigator has no type information for this element.
            </remarks>
            
        </member>
        <member name="P:Hl7.Fhir.ElementModel.IElementNavigator.Value">
             <summary>
             The value of the node (if it represents a primitive FHIR value)
             </summary>
             <remarks>If The underlying source has type information for this element, this property will have typed data (string, integer, etc),
             else this is a raw string from the FHIR wire representation.
             
             <para>
             If the data is typed, FHIR primitives are mapped to underlying C# types as follows:
            
             instant         Hl7.Fhir.Model.Primitive.PartialDateTime
             time            Hl7.Fhir.Model.Primitive.PartialTime
             date, dateTime  Hl7.Fhir.Model.Primitive.PartialDateTime
             decimal         decimal
             boolean         bool
             integer         long
             unsignedInt     long
             positiveInt     long
             code            string
             uri, oid, id    string
             markdown        string
             base64Binary    string (uuencoded)
             </para>
             </remarks>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.IElementNavigator.Location">
            <summary>
            An indication of the location of this node within the data represented by the navigator.
            </summary>
            <remarks>The format of the location is dependent on the source represented by this interface, e.g. this might be an FhirPath-type location,
            a line/position indication, or the dotted name of a property in a POCO. It needs to be sufficiently precise to aid the user in
            locating issues in the data.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirFileFormats">
            <summary>Provides generic definitions and methods for FHIR file formats supported by the API.</summary>
            <seealso cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>
        </member>
        <member name="F:Hl7.Fhir.Serialization.FhirFileFormats.XmlFileExtension">
            <summary>Default Xml file extension: ".xml"</summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.FhirFileFormats.JsonFileExtension">
            <summary>Default Json file extension: ".json"</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirFileFormats.HasXmlExtension(System.String)">
            <summary>Determines if the file extension equals ".xml" (case insensitive).</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirFileFormats.HasJsonExtension(System.String)">
            <summary>Determines if the file extension equals ".json" (case insensitive).</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirFileFormats.HasXmlOrJsonExtension(System.String)">
            <summary>Determines if the file extension equals ".xml" or ".json" (case insensitive).</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirFileFormats.HasExtension(System.String,System.String)">
            <summary>Determines if the file extension equals the specified value (case insensitive).</summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirSerializationFormats">
            <summary>String constants that represent FHIR resource serialization formats supported by the API.</summary>
            <seealso cref="T:Hl7.Fhir.Serialization.FhirFileFormats"/>
        </member>
        <member name="F:Hl7.Fhir.Serialization.FhirSerializationFormats.Xml">
            <summary>Represents the FHIR XML resource serialization format.</summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.FhirSerializationFormats.Json">
            <summary>Represents the FHIR JSON resource serialization format.</summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.ISeekableEnumerator`1">
            <summary>
            Represents a stream of resources which is both enumerable and enables the user to return to previous positions.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.INavigatorStream">
            <summary>
            Provides a sequence of <see cref="T:Hl7.Fhir.ElementModel.IElementNavigator"/> instances to efficiently
            extract information from a raw FHIR resource file, independent of the
            underlying resource serialization format. Also supports resource bundles.
            </summary>
            <remarks>
            Implements <see cref="T:System.Collections.Generic.IEnumerator`1"/>, but not <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Iteration state is tied to the stream instance.
            Nested enumeration is NOT supported.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.INavigatorStream.ResourceType">
            <summary>The typename of the underlying resource (container).</summary>
            <remarks>Call Current.Type to determine the type of the currently enumerated resource.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.INavigatorStream.IsBundle">
            <summary>Returns <c>true</c> if the underlying file represents a Bundle resource, or <c>false</c> otherwise.</summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.JsonNavigatorStream">
            <summary>
            Provides efficient extraction of summary information from a raw FHIR JSON resource file,
            without actually deserializing the full resource. Also supports resource bundles.
            </summary>
            <remarks>Replacement for JsonArtifactScanner (now obsolete).</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonNavigatorStream.#ctor(System.String)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.JsonNavigatorStream"/> instance for the specified serialized json resource file.</summary>
            <param name="path">The filepath of a serialized json resource.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonNavigatorStream.FromPath(System.String)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.JsonNavigatorStream"/> instance for the specified serialized json resource file.</summary>
            <param name="path">The filepath of a serialized json resource.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.JsonNavigatorStream"/> instance.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonNavigatorStream.#ctor(System.IO.Stream)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.JsonNavigatorStream"/> instance for the specified json resource stream.</summary>
            <param name="stream">A stream that returns a serialized json resource.</param>
            <remarks>The <see cref="M:Hl7.Fhir.Serialization.JsonNavigatorStream.Dispose"/> method also disposes the specified <paramref name="stream"/> instance.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonNavigatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.JsonNavigatorStream"/> instance for the specified json resource stream.</summary>
            <param name="stream">A stream that returns a serialized json resource.</param>
            <param name="disposeStream">Determines if the <see cref="M:Hl7.Fhir.Serialization.JsonNavigatorStream.Dispose"/> method should also dispose the specified <paramref name="stream"/> instance.</param>
        </member>
        <member name="P:Hl7.Fhir.Serialization.JsonNavigatorStream.ResourceType">
            <summary>The typename of the underlying resource (container).</summary>
            <remarks>Call Current.Type to determine the type of the currently enumerated resource.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.JsonNavigatorStream.IsBundle">
            <summary>Returns <c>true</c> if the underlying file represents a Bundle resource, or <c>false</c> otherwise.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.JsonNavigatorStream.Current">
            <summary>Returns a new <see cref="T:Hl7.Fhir.ElementModel.IElementNavigator"/> instance positioned on the current entry.</summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory">
            <summary>
            Factory to create new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instances to navigate
            serialized resources, independent of the underlying resource serialization format.
            </summary>
            <remarks>Supports FHIR resource files with ".xml" and ".json" extensions.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory.Create(System.IO.Stream,System.String)">
            <summary>
            Creates a new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance to access the contents of a
            serialized resource stream, independent of the serialization format.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> for reading a serialized FHIR resource.</param>
            <param name="format">A string value that represents the FHIR resource serialization format, as defined by <see cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance.</returns>
            <remarks>Supports XML and JSON serialization formats.</remarks>
            <exception cref="T:System.NotSupportedException">The specified FHIR resource serialization format is not supported.</exception>
            <seealso cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory.GetSerializationFormat(System.String)">
            <summary>Determines serialization format by inspecting the file extension.</summary>
            <param name="path">File path to a FHIR artifact.</param>
            <returns>A constant string value as defined by <see cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory.Create(System.String)">
            <summary>
            Creates a new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance to access the contents of a
            serialized resource, independent of the underlying resource serialization format.
            </summary>
            <param name="path">File path specification of a FHIR resource file.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance, or <c>null</c> (unsupported file extension).</returns>
            <remarks>Supports FHIR resource files with ".xml" and ".json" extensions.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Serialization.NavigatorStreamHelper">
            <summary>Common utility methods for <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> implementations.</summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.NavigatorStreamHelper.DefaultCanonicalBaseUrlForBundleEntry">
            <summary>Default base url for generating canonical urls for Bundle entries.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.NavigatorStreamHelper.FormatCanonicalUrlForBundleEntry(System.String,System.String)">
            <summary>Generate a canonical url for a Bundle entry.</summary>
            <param name="resourceType">A resource type.</param>
            <param name="resourceId">A unique resource Id.</param>
            <returns>A fully qualified canonical url string.</returns>
            <remarks>The generated url starts with the <see cref="F:Hl7.Fhir.Serialization.NavigatorStreamHelper.DefaultCanonicalBaseUrlForBundleEntry"/>.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.NavigatorStreamHelper.FormatCanonicalUrl(System.String,System.String,System.String)">
            <summary>Generate a canonical url from the specified base Url, resource type and id.</summary>
            <param name="baseUrl">A base url.</param>
            <param name="resourceType">A resource type.</param>
            <param name="resourceId">A unique resource Id.</param>
            <returns>A fully qualified canonical url string.</returns>
        </member>
        <member name="T:Hl7.Fhir.Serialization.XmlNavigatorStream">
            <summary>
            Provides efficient extraction of summary information from a raw FHIR XML resource file,
            without actually deserializing the full resource. Also supports resource bundles.
            </summary>
            <remarks>Replacement for XmlArtifactScanner (now obsolete).</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.XmlNavigatorStream.#ctor(System.String)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.XmlNavigatorStream"/> instance for the specified serialized xml resource file.</summary>
            <param name="path">The filepath of a serialized xml resource.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.XmlNavigatorStream.FromPath(System.String)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.XmlNavigatorStream"/> instance for the specified serialized xml resource file.</summary>
            <param name="path">The filepath of a serialized xml resource.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.XmlNavigatorStream"/> instance.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.XmlNavigatorStream.#ctor(System.IO.Stream)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.XmlNavigatorStream"/> instance for the specified xml resource stream.</summary>
            <param name="stream">A stream that returns a serialized xml resource.</param>
            <remarks>The <see cref="M:Hl7.Fhir.Serialization.XmlNavigatorStream.Dispose"/> method also disposes the specified <paramref name="stream"/> instance.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.XmlNavigatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.XmlNavigatorStream"/> instance for the specified xml resource stream.</summary>
            <param name="stream">A stream that returns a serialized xml resource.</param>
            <param name="disposeStream">Determines if the <see cref="M:Hl7.Fhir.Serialization.XmlNavigatorStream.Dispose"/> method should also dispose the specified <paramref name="stream"/> instance.</param>
        </member>
        <member name="P:Hl7.Fhir.Serialization.XmlNavigatorStream.ResourceType">
            <summary>The typename of the underlying resource (container).</summary>
            <remarks>Call Current.Type to determine the type of the currently enumerated resource.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.XmlNavigatorStream.IsBundle">
            <summary>Returns <c>true</c> if the underlying file represents a Bundle resource, or <c>false</c> otherwise.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.XmlNavigatorStream.Current">
            <summary>Returns a new <see cref="T:Hl7.Fhir.ElementModel.IElementNavigator"/> instance positioned on the current entry.</summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.EnumLiteralAttribute.System">
            <summary>
            The system name-space of the code system that this literal value comes from 
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Utility.Error">
            <summary>
            Utility class for creating and unwrapping <see cref="T:System.Exception"/> instances.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Argument(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Argument(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.ArgumentNull(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.ArgumentNull(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.ArgumentNullOrEmpty(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a default message.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.InvalidOperation(System.String)">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.InvalidOperation(System.Exception,System.String)">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.NotSupported(System.String)">
            <summary>
            Creates an <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.NotImplemented(System.String)">
            <summary>
            Creates an <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.NotImplemented">
            <summary>
            Creates an <see cref="T:System.NotImplementedException"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Format(System.String,System.String)">
            <summary> 
            Creates an <see cref="T:System.FormatException"/> with the provided properties. 
            </summary> 
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Format(System.String,Hl7.Fhir.Utility.IPositionInfo)">
            <summary> 
            Creates an <see cref="T:System.FormatException"/> with the provided properties. 
            </summary> 
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.GetAttributeOnEnum``1(System.Enum)">
            <summary>
            Gets an attribute on an enum field value
            </summary>
            <typeparam name="T">The type of the attribute you want to retrieve</typeparam>
            <param name="enumVal">The enum value</param>
            <returns>The attribute of type T that exists on the enum value</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SerializationUtil.SanitizeXml(System.String)">
            <summary>
            Replace all the XML specific special characters with the XHTML equivalents
            </summary>
            <remarks>
            this is based on own research plus combining with results shown here:
            http://www.codeproject.com/Articles/298519/Fast-Token-Replacement-in-Csharp
            The RegEx approach does not require multiple passes or string creations
            while replacing all the items.
            It occurs in O(n) StringBuilder concatenations + O(n) dictionary lookups
            </remarks>
            <param name="xml"></param>
            <returns></returns>
        </member>
    </members>
</doc>
